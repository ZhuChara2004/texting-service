# frozen_string_literal: true

class MessageCreatorService
  def initialize(params)
    @params = params
  end

  def self.call(params)
    new(params).call
  end

  def call
    if phone_number_object.inactive?
      return {
        status: "error",
        message: "Phone number is inactive"
      }
    end

    # TODO: should we create messages if body is blank?
    # if same body is sent multiple times, we will create multiple messages to save historical data events
    message = phone_number_object.messages.create(body: @params[:message_body])

    if message
      {
        status: "ok",
        message_id: message.reload.public_id, # reload is needed to get the public_id, generated by the database
      }
    else
      {
        status: "error",
        message: message.errors.full_messages.join(", ")
      }
    end
  # if exception is raised, we will return error message
  rescue => e
    {
      status: "error",
      message: e.message
    }
  end

  private

  def phone_number_object
    PhoneNumber.find_or_create_by(number: @params[:phone_number])
  end
end